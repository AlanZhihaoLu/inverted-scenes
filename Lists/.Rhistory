pander(signif(unemployment.cis, 3))
pander(signif(strike.volume.cis, 3))
set.seed(0)
null.samples.strike.volume = replicate(500, strike.volume.fun(sim.lm(strike.volume.lm, data, "strike.volume")))
set.seed(0)
strike.volume.mse.that = strike.volume.fun(data)
sum(null.samples.strike.volume > strike.volume.mse.that)
set.seed(0)
null.samples.unemployment = replicate(500, unemployment.fun(sim.lm(unemployment.lm, data, "unemployment")))
set.seed(0)
unemployment.mse.that = unemployment.fun(data)
sum(null.samples.unemployment > unemployment.mse.that)
sum(null.samples.unemployment > unemployment.mse.that)
unemployment.mse.that
null.samples.unemployment
null.samples.unemployment[which(null.samples.unemployment > unemployment.mse.that)]
strike.volume.mse.that
null.samples.strike.volume
a = null.samples.strike.volume
b = null.samples.strike.volume
c(a,b)
(12)/(501)
1/501
3/401
3/501
4/501
plot(resid(inflation.lm))
plot(resid(strike.volume.lm))
plot(resid(unemployment.lm))
plot(resid(density.lm))
plot(resid(centralization.lm))
plot(resample(resid(centralization.lm)))
plot(resample(resid(strike.volume)))
plot(resample(resid(strike.volume.lm)))
plot(resample(resid(inflation.lm)))
plot(resample(resid(unemployment.lm)))
plot(resample(resid(unemployment.lm)))
abline(h=0, col="red", lty="dashed")
plot(resid(unemployment.lm) ~ fitted(unemployment.lm))
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm))
plot(resid(density.lm) ~ fitted(density.lm))
plot(resid(centralization.lm) ~ fitted(centralization.lm))
plot(resid(inflation.lm) ~ fitted(inflation.lm))
qqnorm(resid(inflation.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(inflation.lm))
qqline(resid(strike.volume.lm))
qqnorm(resid(strike.volume.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(strike.volume.lm))
qqnorm(resid(unemployment.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(unemployment.lm))
qqnorm(resid(density.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(density.lm))
qqnorm(resid(centralization), main="Fig. 5d: Normal Q-Q Plot")
qqnorm(resid(centralization.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(centralization.lm))
plot(resample(resid(density.lm)))
plot(resample(resid(density.lm)))
abline(h=0, col="red", lty="dashed")
plot(resample(resid(inflation.lm)))
plot(resample(resid(inflation.lm)))
abline(h=0, col="red", lty="dashed")
plot(resid(inflation.lm) ~ fitted(inflation.lm))
plot(resid(density.lm) ~ fitted(density.lm))
hist(data$strike.volume)
qqnorm(data$strike.volume)
qqnorm(data$strike.volume)
qqline(data$strike.volume)
qqnorm(data$unemployment)
qqline(data$unemployment)
qqnorm(data$inflation)
qqnorm(data$inflation)
qqline(data$inflation)
qqnorm(data$left.parliament)
qqline(data$left.parliament)
qqline(data$density)
qqnorm(data$density)
qqline(data$density)
library(pcalg)
suffStat <- list(C=cor(data),n=nrow(data))
pc.fit <- pc(suffStat, indepTest=gaussCItest, p=ncol(data), alpha=0.05)
library(Rgraphviz)
plot(pc.fit,labels=colnames(data),main="Inferred DAG for Strikes in OECD Countries")
qqnorm(data$centralization)
qqline(data$centralization)
qqnorm(data$unemployment)
qqline(data$unemployment)
qqnorm(data$inflation)
qqline(data$inflation)
qqnorm(data$strike.volume)
qqline(data$strike.volume)
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of Strike Volume")
qqline(data$strike.volume)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of Strike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment)
qqline(data$unemployment)
qqnorm(data$inflation)
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment)
qqline(data$unemployment)
qqnorm(data$inflation)
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment)
qqline(data$unemployment)
qqnorm(data$inflation)
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment, main="Fig. 1b: Normal Q-Q Plot of\nUnemployment")
qqline(data$unemployment)
qqnorm(data$inflation, main="Fig. 1c: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment, main="Fig. 1b: Normal Q-Q Plot of\nUnemployment")
qqline(data$unemployment)
par(mfrow=c(2,1), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment, main="Fig. 1b: Normal Q-Q Plot of\nUnemployment")
qqline(data$unemployment)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment, main="Fig. 1b: Normal Q-Q Plot of\nUnemployment")
qqline(data$unemployment)
qqnorm(resid(centralization.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(centralization.lm))
qqnorm(resid(unemployment.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(unemployment.lm))
qqnorm(resid(strike.volume.lm), main="Fig. 5d: Normal Q-Q Plot")
qqline(resid(strike.volume.lm))
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$unemployment, main="Fig. 1b: Normal Q-Q Plot of\nUnemployment")
qqline(data$unemployment)
qqnorm(data$inflation, main="Fig. 1c: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$inflation, main="Fig. 1c: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$inflation, main="Fig. 1b: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
par(mfrow=c(2,1), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$inflation, main="Fig. 1b: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
qqnorm(data$strike.volume, main="Fig. 1a: Normal Q-Q Plot of\nStrike Volume")
qqline(data$strike.volume)
qqnorm(data$inflation, main="Fig. 1b: Normal Q-Q Plot of\nInflation")
qqline(data$inflation)
plot(resample(resid(unemployment.lm)))
abline(h=0, col="red", lty="dashed")
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm))
plot(resid(inflation.lm) ~ fitted(inflation.lm))
plot(resid(density.lm) ~ fitted(density.lm))
plot(resid(unemployment.lm))
abline(h=0, col="red", lty="dashed")
plot(resid(unemployment.lm))
abline(h=0, col="red", lty="dashed")
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm), main="Fig. 3b: Residual vs. Fitted Plot of Strike Volume")
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
plot(resid(unemployment.lm), main="Fig. 3a: Residual Plot of Unemployment")
abline(h=0, col="red", lty="dashed")
plot(resid(inflation.lm) ~ fitted(inflation.lm), main="Fig. 3b: Residual vs. Fitted Plot of Inflation")
abline(h=0, col="red", lty="dashed")
plot(resid(density.lm) ~ fitted(density.lm), main="Fig. 3c: Residual vs. Fitted Plot of Density")
abline(h=0, col="red", lty="dashed")
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm), main="Fig. 3d: Residual vs. Fitted Plot of Strike Volume")
abline(h=0, col="red", lty="dashed")
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
plot(resid(unemployment.lm), main="Fig. 3a: Residual Plot of\nUnemployment")
abline(h=0, col="red", lty="dashed")
plot(resid(inflation.lm) ~ fitted(inflation.lm), main="Fig. 3b: Residual vs. Fitted Plot of\nInflation")
abline(h=0, col="red", lty="dashed")
plot(resid(density.lm) ~ fitted(density.lm), main="Fig. 3c: Residual vs. Fitted Plot of\nDensity")
abline(h=0, col="red", lty="dashed")
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm), main="Fig. 3d: Residual vs. Fitted Plot of\nStrike Volume")
abline(h=0, col="red", lty="dashed")
par(mfrow=c(2,2), mar=c(4,4,2,0.5))
plot(resid(unemployment.lm), main="Fig. 3a: Residual Plot of\nUnemployment",
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0, col="red", lty="dashed")
plot(resid(inflation.lm) ~ fitted(inflation.lm), main="Fig. 3b: Residual vs. Fitted Plot of\nInflation",
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0, col="red", lty="dashed")
plot(resid(density.lm) ~ fitted(density.lm), main="Fig. 3c: Residual vs. Fitted Plot of\nDensity",
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0, col="red", lty="dashed")
plot(resid(strike.volume.lm) ~ fitted(strike.volume.lm),
main="Fig. 3d: Residual vs. Fitted Plot of\nStrike Volume",
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0, col="red", lty="dashed")
coef.centralization
coef.inflation
all.vec.df = rbind(sv.vec, inf.vec, unemp.vec, dens.vec, cen.vec)
sv.vec = data.frame(Model = "Strike Volume", p.value = 0.001996008, AsLargeAsNull = 0)
inf.vec = data.frame(Model = "Inflation Rate", p.value = 0.005988024, AsLargeAsNull = 2)
unemp.vec = data.frame(Model = "Unemployment Rate", p.value = 0.007984032, AsLargeAsNull = 3)
dens.vec = data.frame(Model = "Union Density", p.value = 0.001996008, AsLargeAsNull = 0)
cen.vec = data.frame(Model = "Centralization", p.value = 0.001996008, AsLargeAsNull = 0)
all.vec.df = rbind(sv.vec, inf.vec, unemp.vec, dens.vec, cen.vec)
all.vec.df
table(all.vec.df)
pander(all.vec.df)
signif(all.vec.df, 3)
all.vec.df$p.value = signif(all.vec.df$p.value, 3)
pander(all.vec.df)
sv.vec = data.frame(Model = "Strike Volume", p.value = 0.001996008, AsLargeAsNull = 0)
inf.vec = data.frame(Model = "Inflation Rate", p.value = 0.005988024, AsLargeAsNull = 2)
unemp.vec = data.frame(Model = "Unemployment Rate", p.value = 0.007984032, AsLargeAsNull = 3)
dens.vec = data.frame(Model = "Union Density", p.value = 0.001996008, AsLargeAsNull = 0)
cen.vec = data.frame(Model = "Centralization", p.value = 0.001996008, AsLargeAsNull = 0)
all.vec.df = rbind(sv.vec, inf.vec, unemp.vec, dens.vec, cen.vec)
all.vec.df$p.value = signif(all.vec.df$p.value, 3)
pander(all.vec.df)
full
head(full)
full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff")]
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff")], "datanoorder.csv")
full$Choice = as.numeric(full$Choice)
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff")], "datanoorder.csv")
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff")], "datanoorder2.csv")
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff")], "datanoorder2.txt")
full$Order = as.numeric(full$Order)
?write.csv
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff", "Order")], "studystrategiesdata.txt", quote=FALSE)
full$NormAvg = as.factor(full$NormAvg)
full$Order = as.factor(full$Order)
str(full)
full$NormAvg = as.numeric(full$NormAvg)
str(full)
str(full)
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff", "Order")])
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff", "Order")], "fulldata.csv")
full$Choice = as.numeric(full$Choice)
full$Order = as.numeric(full$Order)
write.csv(full[,c("NormAvg", "Choice", "LearnDiff", "EffortDiff", "Order")], "fulldata.csv")
?mediation
library(psych)
library(mediation)
?mediatoin
?mediation
??mediation
?mediate
library(glmnet)
mdl1 = glm(full$LearnDiff ~ full$LearnDiff, family="binomial")
mdl2 = glm(full$Choice ~ full$LearnDiff + full$EffortDiff, family="binomial")
mdl1 = glm(full$LearnDiff ~ full$LearnDiff)
?glm
mdl1 = lm(full$LearnDiff ~ full$LearnDiff)
mdl1
summary(mdl1)
mdl2 = glm(full$Choice ~ full$LearnDiff + full$EffortDiff, family="binomial")
full$Choice
mdl2 = glm((full$Choice-1) ~ full$LearnDiff + full$EffortDiff, family="binomial")
mdl2
summary(mdl2)
mediate(mdl1, mdl2)
mediate(mdl1, mdl2)
mdl1 = lm(full$LearnDiff ~ full$EffortDiff)
mdl2 = glm((full$Choice-1) ~ full$LearnDiff + full$EffortDiff, family="binomial")
mediate(mdl1, mdl2)
mdl1
summary(mdl1)
mdl2
library(tidyverse)
mdl2 %>% summary()
mediate(mdl1, mdl2)
?mediate
mdl1 = glm(full$LearnDiff ~ full$EffortDiff)
mdl2 = glm((full$Choice-1) ~ full$LearnDiff + full$EffortDiff, family="binomial")
mediate(mdl1, mdl2)
mdl1
mdl1 %>% summary()
mediate(mdl1, mdl2)
mediate(mdl2, mdl1)
a = c(1, 2, 3)
b = a
a[1] = 42
a
b
read.csv("MLLinesTB_Sub22044_R3.csv")
print('hello')
setwd("/Volumes/Share/members/azlu/Projects")
library(readxl)
library(tidyverse)
raw = read.csv('all_edf.csv')
sub1full = raw[raw$sbj==1,]
sub1mem = sub1full[sub1full$task=="memorize",]
plot(sub1mem$NEXT_SAC_AMPLITUDE ~ sub1mem$NEXT_SAC_AVG_VELOCITY)
sub1memsub = sub1mem[,c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE")]
sub1memsub = as.data.frame(lapply(sub1memsub, as.numeric))
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(NEXT_SAC_DURATION))) + geom_point()
sub1mem %>% ames()
sub1mem %>% names()
p
View(sub1mem)
?row_number
sub1mem %>%
group_by(., TRIAL_LABEL) %>%
mutate(., saccade_ind=row_number())
View(sub1mem)
sub1mem %>% names()
sub1mem = sub1mem %>%
group_by(., TRIAL_LABEL) %>%
mutate(., saccade_ind=row_number())
sub1mem %>% names()
sub1memsub = sub1mem[,c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")]
sub1memsub = as.data.frame(lapply(sub1memsub, as.numeric))
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind))) + geom_point()
p
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=saccade_ind)) + geom_point()
View(sub1mem)
p
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=saccade_ind, alpha=0.5)) + geom_point()
p
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, log(NEXT_SAC_AVG_VELOCITY), color=log(saccade_ind), alpha=0.25)) + geom_point()
p
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p
setwd("/Volumes/Share/members/azlu/Projects")
library(readxl)
library(tidyverse)
raw = read.csv('all_edf.csv')
raw = raw %>%
group_by(., TRIAL_LABEL) %>%
mutate(., saccade_ind=row_number())
sub1full = raw[raw$sbj==1,]
sub1mem = sub1full[sub1full$task=="memorize",]
plot(sub1mem$NEXT_SAC_AMPLITUDE ~ sub1mem$NEXT_SAC_AVG_VELOCITY)
sub1memsub = sub1mem[,c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")]
sub1memsub = as.data.frame(lapply(sub1memsub, as.numeric))
p = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p = ggplot(raw, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p
p_sub1mem = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p_full = ggplot(raw, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p_sub1mem
p_sub1full = ggplot(sub1full, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p_sub1full
p_sub1mem = ggplot(sub1memsub, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point()
p_sub1full
make_plots = function() {
return(1+1)
}
make_plots
make_plots()
a[0]
2[0]
View(sub1mem)
View(sub1full)
unique(sub1full$task)
make_plots = function(data, subN) {
subfull = data[data$sbj==subN,]
submem = as.data.frame(lapply(subfull[subfull$task=="memorize",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
subaes = as.data.frame(lapply(subfull[subfull$task=="aesthetic",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
p_mem = ggplot(submem, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("memorize")
p_aes = ggplot(subaes, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("aesthetic")
return(c(p_mem, p_aes))
}
sub1plots = make_plots(raw, 1)
sub1plots[0]
sub1plots[0] %>% print()
make_plots = function(data, subN) {
subfull = data[data$sbj==subN,]
submem = as.data.frame(lapply(subfull[subfull$task=="memorize",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
subaes = as.data.frame(lapply(subfull[subfull$task=="aesthetic",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
p_mem = ggplot(submem, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("memorize")
p_aes = ggplot(subaes, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("aesthetic")
grid.arrange(p_mem, p_aes, ncol=2)
}
sub1plots = make_plots(raw, 1)
make_memplot = function(data, subN) {
subfull = data[data$sbj==subN,]
submem = as.data.frame(lapply(subfull[subfull$task=="memorize",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
ggplot(submem, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("memorize")
}
make_aesplot = function(data, subN) {
subfull = data[data$sbj==subN,]
subaes = as.data.frame(lapply(subfull[subfull$task=="aesthetic",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
ggplot(subaes, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("aesthetic")
}
make_memplot(raw, 1)
make_aesplot(raw, 1)
make_memplot(raw, 2)
make_aesplot(raw, 2)
make_aesplot(raw, 3)
make_aesplot(raw, 4)
make_memplot(raw, 4)
make_memplot(raw, 3)
make_memplot(raw, 5)
make_memplot(raw, 6)
make_memplot(raw, 7)
make_memplot(raw, 8)
make_memplot(raw, 9)
make_memplot(raw, 1)
make_memplot(raw, 2)
make_memplot(raw, 3)
make_memplot(raw, 4)
make_memplot(raw, 5)
make_memplot = function(data, subN) {
subfull = data[data$sbj==subN,]
submem = as.data.frame(lapply(subfull[subfull$task=="memorize",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
ggplot(submem, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_DURATION, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("memorize")
}
make_memplot(raw, 5)
make_memplot(raw, 1)
make_memplot(raw, 2)
make_memplot(raw, 3)
make_memplot = function(data, subN) {
subfull = data[data$sbj==subN,]
submem = as.data.frame(lapply(subfull[subfull$task=="memorize",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
ggplot(submem, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("memorize")
}
make_aesplot = function(data, subN) {
subfull = data[data$sbj==subN,]
subaes = as.data.frame(lapply(subfull[subfull$task=="aesthetic",c("NEXT_SAC_AMPLITUDE", "NEXT_SAC_AVG_VELOCITY", "NEXT_SAC_DURATION", "CURRENT_FIX_DURATION", "NEXT_SAC_ANGLE", "saccade_ind")], as.numeric))
ggplot(subaes, aes(NEXT_SAC_AMPLITUDE, NEXT_SAC_AVG_VELOCITY, color=log(saccade_ind), alpha=0.25)) + geom_point() + ggtitle("aesthetic")
}
make_memplot(raw, 1)
make_memplot(raw, 3)
a.	dbinom(10, 15, .5)
dbinom(10, 15, .5)
dbinom(5, 15, .5)
~/.rstudio/sessions/active
setwd("~/Documents/Graduate Files/InvertedScenes/invertedScenes-main/Lists")
main_list = read.csv("rb01_list.csv")
full_check = function(condition_letter, main_list) {
full_report = c()
full_report = c(full_report, consistent_scene_probe_check(condition_letter, main_list))
full_report = c(full_report, number_per_condition_check(condition_letter))
for (message in full_report) {
cat(paste(message, "\n"))
}
}
number_per_condition_check = function(condition_letter) {
filename=paste("rb01_condition", condition_letter, ".csv", sep="")
check=read.csv(filename)
report = c()
if (all(table(check$Object)==2)) {
report = c(report, paste(filename, "Object Status --> GOOD"))
} else {
report = c(report, paste(filename, "Object Status --> ERROR"))
}
if (all(table(check$consistency_category) == c(30, 60, 30))) {
report = c(report, paste(filename, "consistency_category Status --> GOOD"))
} else {
report = c(report, paste(filename, "consistency_category Status --> ERROR"))
}
if (all(c(all(table(check$Object)==2), all(table(check$consistency_category) == c(30, 60, 30))))) {
report = c(report, paste(filename, "number_per_condition_check passes with no errors --> GOOD"))
} else {
report = c(report, paste(filename, "ERROR in condition_check --> ERROR"))
}
return(report)
}
consistent_scene_probe_check = function(condition_letter, main_list) {
filename=paste("rb01_condition", condition_letter, ".csv", sep="")
check=read.csv(filename)
con_sub = check[check$Consistent=="Consistent",]
cat("---------------------------------------------------\n")
if (nrow(con_sub) == 60) {
cat(paste(filename, "Total number of unique objects is 60 --> GOOD\n"))
unique_objects_flag = TRUE
} else {
cat(paste(filename, "Total number of unique objects is NOT 60:", nrow(con_sub), "unique objects --> ERROR\n"))
unique_objects_flag = FALSE
}
object_list = main_list[main_list$Object %in% con_sub$Object,]
counter = 0
for (i in 1:nrow(con_sub)) {
if (!(object_list[which(object_list$SceneImage == con_sub$SceneImage[i]),c("Object")] == con_sub[i,c("Object")])) {
cat("There is an incorrect scene-probe pairing at:\n")
print(con_sub[i,])
counter = counter + 1
}
}
report = c(paste(filename, "Total incorrect scene-probe pairings:", counter, ifelse(counter==0, "--> GOOD", "ERROR")))
if (counter == 0&unique_objects_flag) {
report = c(report, paste(filename, "consistent_object_probe_check passes with no errors --> GOOD"))
} else {
report = c(report, paste(filename, "ERROR in condition_check --> ERROR"))
}
return(report)
}
for (letter in LETTERS[1:1]) {
full_check(letter, main_list)
}
